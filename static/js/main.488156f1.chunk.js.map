{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","SpiningMesh","position","args","color","mesh","useRef","useFrame","current","rotation","x","y","castShadow","ref","attach","App","shadows","colorManagement","camera","fov","intensity","Math","PI","receiveShadow","opacity","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAMAA,cAEA,IAAMC,EAAc,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC9BC,EAAOC,iBAAO,MAEpB,OADAC,aAAS,kBAAMF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OAElE,uBAAMC,YAAU,EAACV,SAAUA,EAAUW,IAAKR,EAA1C,UACM,mCAAmBS,OAAO,WAAWX,KAAMA,IAC3C,sCAAsBW,OAAO,WAAWV,MAAOA,QAkD1CW,MA7Cf,WAGE,OACE,mCAEE,eAAC,IAAD,CACEC,SAAO,EACPC,iBAAe,EACfC,OAAQ,CAAEhB,SAAU,EAAE,EAAE,EAAE,IAAKiB,IAAK,IAHtC,UAIE,8BAAcC,UAAW,KACzB,kCACGR,YAAU,EACVV,SAAU,CAAC,EAAG,GAAI,GAClBkB,UAAW,IACX,uBAAsB,KACtB,wBAAuB,KACvB,oBAAmB,GACnB,sBAAqB,GACrB,sBAAqB,GACrB,oBAAmB,GACnB,wBAAuB,KAE1B,4BAAYlB,SAAU,EAAE,GAAG,GAAG,IAAKkB,UAAW,KAC9C,4BAAYlB,SAAU,CAAC,GAAG,GAAG,GAAIkB,UAAW,MAE5C,gCACE,uBACEX,SAAU,EAAEY,KAAKC,GAAK,EAAG,EAAG,GAC5BpB,SAAU,CAAC,GAAI,EAAG,GAClBqB,eAAa,EAHf,UAIE,qCAAqBT,OAAO,WAAWX,KAAM,CAAC,IAAK,OACnD,gCAAgBW,OAAO,WAAWU,QAAS,UAI/C,cAAC,EAAD,CAAatB,SAAU,CAAC,EAAE,EAAE,GAAIC,KAAM,CAAC,EAAE,EAAE,GAAIC,MAAM,cACrD,cAAC,EAAD,CAAaF,SAAU,EAAE,EAAE,GAAG,GAAIE,MAAM,SACxC,cAAC,EAAD,CAAaF,SAAU,CAAC,EAAE,GAAG,GAAIE,MAAM,SACvC,cAACqB,EAAA,EAAD,UC9COC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.488156f1.chunk.js","sourcesContent":["import { useRef } from 'react';\nimport './App.scss';\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { softShadows, OrbitControls } from \"@react-three/drei\";\n\n\nsoftShadows();\n\nconst SpiningMesh = ({position, args, color}) => {\n  const mesh = useRef(null);\n  useFrame(()=> (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n  return(\n    <mesh castShadow position={position} ref={mesh}>\n          <boxBufferGeometry attach=\"geometry\" args={args}/>\n          <meshStandardMaterial attach=\"material\" color={color}/>\n        </mesh>\n  )\n}\n\nfunction App() {\n  \n\n  return (\n    <>\n      \n      <Canvas \n        shadows\n        colorManagement \n        camera={{ position: [-5,2,10], fov: 60 }}>\n        <ambientLight intensity={.3}/>\n        <directionalLight\n           castShadow\n           position={[0, 10, 0]}\n           intensity={1.5}\n           shadow-mapSize-width={1024}\n           shadow-mapSize-height={1024}\n           shadow-camera-far={50}\n           shadow-camera-left={-10}\n           shadow-camera-right={10}\n           shadow-camera-top={10}\n           shadow-camera-bottom={-10}\n        />\n        <pointLight position={[-10,0,-20]} intensity={.5}/>\n        <pointLight position={[0,-10,0]} intensity={1.5}/>\n\n        <group>\n          <mesh\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, -3, 0]}\n            receiveShadow>\n            <planeBufferGeometry attach='geometry' args={[100, 100]} />\n            <shadowMaterial attach='material' opacity={0.3} />\n          </mesh>\n        </group>\n\n        <SpiningMesh position={[0,1,0]} args={[3,2,1]} color=\"lightBlue\"/>\n        <SpiningMesh position={[-2,1,-5]} color=\"pink\"/>\n        <SpiningMesh position={[5,1,-2]} color=\"pink\"/>\n        <OrbitControls/>\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}